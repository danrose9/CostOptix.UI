parameters:
  - name: tenantId
    type: string
    default: ''
  - name: branch
    type: string
    default: 'main'
  - name: environment
    type: string
    default: ''
  - name: subscriptionId
    type: string
    default: ''
  - name: kvServiceConnection
    type: string
    default: ''
  - name: deploymentKeyVaultName
    type: string
    default: ''
  - name: apiUrl
    type: string
    default: ''
  - name: adoEnvironment
    type: string
    default: ''
  - name: runTests
    type: boolean
    default: true

steps:
  - task: PowerShell@2
    displayName: Dump Environment Variables
    inputs:
      targetType: 'inline'
      script: |
        dir env: | Format-Table -wrap
  - script: |
      npm install
      npm run build-${{parameters.environment}}
    displayName: npm install, build
  - ${{ if parameters.runTests}}:
      - template: test.ui.yaml
  - script: (cd build && zip -r $(Build.ArtifactStagingDirectory)/build-${{parameters.environment}}.zip .)
    displayName: Zip Deployment
    condition: succeeded()
  - publish: $(Build.ArtifactStagingDirectory)/build-${{parameters.environment}}.zip
    displayName: Publish Artifacts
    condition: succeeded()
    artifact: App-${{parameters.environment}}

  # - script: |
  #     npm run test -- --coverage --watchAll=false --ci --reporters=default --reporters=jest-junit --coverageReporters=cobertura
  #   displayName: 'Test with code coverage'
  # - task: PublishTestResults@2
  #   displayName: Publish Test Results
  #   condition: succeededOrFailed()
  #   inputs:
  #     testResultsFormat: 'JUnit'
  #     testResultsFiles: '**/junit.xml'
  #     failTaskOnFailedTests: true
  #     mergeTestResults: true
  # - task: PublishCodeCoverageResults@1
  #   displayName: 'Publish Code Coverage'
  #   inputs:
  #     codeCoverageTool: Cobertura
  #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
  #     reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
  #     failIfCoverageEmpty: false
