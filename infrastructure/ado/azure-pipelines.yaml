trigger:
  - develop
  - main

pool:
  vmImage: ubuntu-latest

variables:
  tenantId: 90598989-b884-4fc1-999f-d176a8e1a54e
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDevelop: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  envDev: dev
  envProd: prod
  subscriptionIdDev: 94e4237e-953e-4c21-9a4e-fc3f3699d9e4
  subscriptionIdProd: f01f288f-34a3-415e-bbb3-f94336f6f6dd
  kvServiceConnectionDev: DEV KV Service Connection
  kvServiceConnectionProd: PROD KV Service Connection
  apiUrlDev: 'https://api.dev.costoptix.com'
  apiUrlProd: 'https://api.costoptix.com'

stages:
  - stage: BuildAndTestStageDev
    displayName: Build and Test Dev
    condition: eq(variables['build.sourceBranch'], 'refs/heads/develop')
    jobs:
      - job: BuildAndTestJob
        displayName: Build and Test
        steps:
          - script: |
              npm install
              npm version patch
              npm run build-dev
            displayName: npm install, build
          - script: |
              npm run test -- --coverage --watchAll=false --ci --reporters=default --reporters=jest-junit --coverageReporters=cobertura
            displayName: 'Test with code coverage'
          - task: PublishTestResults@2
            displayName: Publish Test Results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: true
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
              failIfCoverageEmpty: false
          - script: (cd build && zip -r $(Build.ArtifactStagingDirectory)/build-dev.zip .)
            displayName: Zip Deployment
            condition: and(succeeded(), eq(variables.isPullRequest, 'false'))
          - publish: $(Build.ArtifactStagingDirectory)/build-dev.zip
            displayName: Publish Artifacts
            condition: and(succeeded(), eq(variables.isPullRequest, 'false'))
            artifact: App-dev

  - stage: BuildAndTestStageProd
    displayName: Build and Test Prod
    condition: eq(variables['build.sourceBranch'], 'refs/heads/main')
    dependsOn: []
    jobs:
      - job: BuildAndTestJob
        displayName: Build and Test Prod
        steps:
          - script: |
              npm install
              npm run build-prod
            displayName: npm install, build
          - script: (cd build && zip -r $(Build.ArtifactStagingDirectory)/build-prod.zip .)
            displayName: Zip Deployment
            condition: and(succeeded(), eq(variables.isPullRequest, 'false'))
          - publish: $(Build.ArtifactStagingDirectory)/build-prod.zip
            displayName: Publish Artifacts
            condition: and(succeeded(), eq(variables.isPullRequest, 'false'))
            artifact: App-prod

  - stage: TFPlanDevStage
    displayName: Terraform Plan DEV
    dependsOn: BuildAndTestStageDev
    jobs:
      - job: TerraformPlanDevJob
        displayName: Terraform Plan
        steps:
          - template: _template-tf-plan.yaml
            parameters:
              Env: $(envDev)
              SubscriptionId: $(subscriptionIdDev)
              KVServiceConnection: $(kvServiceConnectionDev)
              ApiUrl: $(apiUrlDev)

  - stage: DeployDevStage
    displayName: Deploy DEV
    dependsOn: TFPlanDevStage
    condition: and(succeeded(), eq(variables.isPullRequest, 'false'))
    jobs:
      - deployment: DeployDevJob
        displayName: Deploy DEV
        environment: DEV-App
        strategy:
          runOnce:
            deploy:
              steps:
                - template: _template-deploy.yaml
                  parameters:
                    Env: $(envDev)
                    SubscriptionId: $(subscriptionIdDev)
                    KVServiceConnection: $(kvServiceConnectionDev)

  - stage: TFPlanProdStage
    displayName: Terraform Plan PROD
    dependsOn: BuildAndTestStageProd
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    jobs:
      - job: TerraformPlanProdJob
        displayName: Terraform Plan
        steps:
          - template: _template-tf-plan.yaml
            parameters:
              Env: $(envProd)
              SubscriptionId: $(subscriptionIdProd)
              KVServiceConnection: $(kvServiceConnectionProd)
              ApiUrl: $(apiUrlProd)

  - stage: DeployProdStage
    displayName: Deploy PROD
    dependsOn: TFPlanProdStage
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    jobs:
      - deployment: DeployProdJob
        displayName: Deploy PROD
        environment: PROD-App
        strategy:
          runOnce:
            deploy:
              steps:
                - template: _template-deploy.yaml
                  parameters:
                    Env: $(envProd)
                    SubscriptionId: $(subscriptionIdProd)
                    KVServiceConnection: $(kvServiceConnectionProd)
